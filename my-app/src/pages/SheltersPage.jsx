import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getShelters } from '../services/shelterService';
import '../styles/main.css';
import headerBackground from '../assets/shelters-header.jpg';
import defaultShelterImage from '../assets/default-shelter.jpg';

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ –ø—Ä–∏—Ç—É–ª–∫—É –∑ –∫—Ä–∞—â–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
const ShelterCard = ({ shelter }) => {
  const handleImageError = (e) => {
    e.target.onerror = null;
    e.target.src = defaultShelterImage;
  };

  return (
    <Link to={`/shelters/${shelter._id || shelter.id}`} className="shelters-page-card">
      <div className="shelters-page-image-container">
        <img 
          src={shelter.image} 
          alt={shelter.name} 
          className="shelters-page-image" 
          onError={handleImageError}
        />
        <div className="shelters-page-type-badge">
          {shelter.type === 'cat' ? '–ö–æ—Ç—è—á–∏–π' :
           shelter.type === 'dog' ? '–°–æ–±–∞—á–∏–π' :
           shelter.type === 'mixed' ? '–ó–º—ñ—à–∞–Ω–∏–π' : '–ö–ª—ñ–Ω—ñ–∫–∞'}
        </div>
        {shelter.verified && (
          <div className="shelters-page-verified-badge" title="–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π –ø—Ä–∏—Ç—É–ª–æ–∫">
            ‚úì
          </div>
        )}
      </div>
      <div className="shelters-page-details">
        <h3>{shelter.name}</h3>
        <p className="shelters-page-location">
          <span className="icon">üìç</span> {shelter.location}
        </p>
        <p className="shelters-page-description">{shelter.description}</p>
        <div className="shelters-page-stats">
          <div className="shelters-page-stat">
            <span className="shelters-page-stat-value">{shelter.animalsCount}</span>
            <span className="shelters-page-stat-label">–¢–≤–∞—Ä–∏–Ω</span>
          </div>
          <div className="shelters-page-stat">
            <span className="shelters-page-stat-value">{shelter.rating?.toFixed(1) || '-'}</span>
            <span className="shelters-page-stat-label">
              <span className="star-icon">‚òÖ</span> 
              <span className="review-count">({shelter.reviewsCount || 0})</span>
            </span>
          </div>
          <div className="shelters-page-stat">
            <span className="shelters-page-stat-value">{shelter.foundedYear}</span>
            <span className="shelters-page-stat-label">–ó–∞—Å–Ω–æ–≤–∞–Ω–∏–π</span>
          </div>
        </div>
      </div>
    </Link>
  );
};

const SheltersPage = () => {
  // –°—Ç–∞–Ω–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏–º–∏ —Ç–∞ UI
  const [shelters, setShelters] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 9;

  // –°—Ç–∞–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const [filters, setFilters] = useState({
    type: 'all',
    location: 'all',
    verified: false,
    searchQuery: '',
  });

  // –û–ø—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const shelterTypes = [
    { value: 'all', label: '–í—Å—ñ —Ç–∏–ø–∏' },
    { value: 'dog', label: '–°–æ–±–∞—á—ñ' },
    { value: 'cat', label: '–ö–æ—Ç—è—á—ñ' },
    { value: 'mixed', label: '–ó–º—ñ—à–∞–Ω—ñ' },
    { value: 'clinic', label: '–ö–ª—ñ–Ω—ñ–∫–∏' },
  ];

  const locations = [
    { value: 'all', label: '–ë—É–¥—å-—è–∫–µ –º—ñ—Å—Ç–æ' },
    { value: 'kyiv', label: '–ö–∏—ó–≤' },
    { value: 'lviv', label: '–õ—å–≤—ñ–≤' },
    { value: 'odesa', label: '–û–¥–µ—Å–∞' },
    { value: 'kharkiv', label: '–•–∞—Ä–∫—ñ–≤' },
    { value: 'dnipro', label: '–î–Ω—ñ–ø—Ä–æ' },
  ];

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∞–±–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  useEffect(() => {
    const fetchShelters = async () => {
      try {
        setLoading(true);
        
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Ç—É
        const queryParams = {
          page: currentPage,
          limit: pageSize,
          ...filters,
        };
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä "all", —â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–∞–π–≤–∏—Ö –¥–∞–Ω–∏—Ö
        Object.keys(queryParams).forEach(key => {
          if (queryParams[key] === 'all') delete queryParams[key];
        });
        
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏—Ç—É–ª–∫—ñ–≤ –∑ —Å–µ—Ä–≤—ñ—Å—É
        const response = await getShelters(queryParams);
        
        setShelters(response.data || []);
        setTotalCount(response.totalCount || response.data?.length || 0);
        
      } catch (err) {
        console.error('Error fetching shelters:', err);
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Ç—É–ª–∫—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      } finally {
        setLoading(false);
      }
    };

    fetchShelters();
  }, [currentPage, filters]);

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
    setCurrentPage(1); // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  };

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —á–µ–∫–±–æ–∫—Å—É (–¥–ª—è verified)
  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setFilters(prev => ({ ...prev, [name]: checked }));
    setCurrentPage(1);
  };

  // –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const clearFilters = () => {
    setFilters({
      type: 'all',
      location: 'all',
      verified: false,
      searchQuery: '',
    });
    setCurrentPage(1);
  };

  // –ó–º—ñ–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
    window.scrollTo(0, 0);
  };

  const totalPages = Math.ceil(totalCount / pageSize);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const Pagination = () => {
    if (totalPages <= 1) return null;
    
    return (
      <div className="shelters-page-pagination">
        <button 
          className="shelters-page-page-btn"
          disabled={currentPage === 1}
          onClick={() => handlePageChange(currentPage - 1)}
        >
          &laquo; –ù–∞–∑–∞–¥
        </button>
        
        <div className="shelters-page-page-indicators">
          {currentPage > 1 && (
            <button onClick={() => handlePageChange(1)}>1</button>
          )}
          
          {currentPage > 3 && <span>...</span>}
          
          {currentPage > 2 && (
            <button onClick={() => handlePageChange(currentPage - 1)}>{currentPage - 1}</button>
          )}
          
          <button className="active">{currentPage}</button>
          
          {currentPage < totalPages - 1 && (
            <button onClick={() => handlePageChange(currentPage + 1)}>{currentPage + 1}</button>
          )}
          
          {currentPage < totalPages - 2 && <span>...</span>}
          
          {currentPage < totalPages && (
            <button onClick={() => handlePageChange(totalPages)}>{totalPages}</button>
          )}
        </div>
        
        <button 
          className="shelters-page-page-btn"
          disabled={currentPage === totalPages}
          onClick={() => handlePageChange(currentPage + 1)}
        >
          –î–∞–ª—ñ &raquo;
        </button>
      </div>
    );
  };

  return (
    <div className="shelters-page">
      <div className="shelters-page-top-section" 
        style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.7)), url(${headerBackground})` }}>
        <div className="container">
          <h1>–ü—Ä–∏—Ç—É–ª–∫–∏ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω</h1>
          <p>–ó–Ω–∞–π–¥—ñ—Ç—å –ø—Ä–∏—Ç—É–ª–æ–∫, —è–∫–∏–π –ø–æ—Ç—Ä–µ–±—É—î –≤–∞—à–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –∞–±–æ –∑ —è–∫–æ–≥–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ —Ç–≤–∞—Ä–∏–Ω–∫—É</p>
          <div className="shelters-page-search-box">
            <input
              type="text"
              name="searchQuery"
              value={filters.searchQuery}
              onChange={handleFilterChange}
              placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é, –æ–ø–∏—Å–æ–º –∞–±–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è–º..."
              className="shelters-page-search-input"
            />
            <button className="shelters-page-search-btn" aria-label="–ü–æ—à—É–∫">üîç</button>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="shelters-page-filter-section">
          <div className="shelters-page-filter-group">
            <label htmlFor="type-filter">–¢–∏–ø –ø—Ä–∏—Ç—É–ª–∫—É</label>
            <select
              id="type-filter"
              name="type"
              value={filters.type}
              onChange={handleFilterChange}
              className="shelters-page-filter-select"
            >
              {shelterTypes.map(type => (
                <option key={type.value} value={type.value}>{type.label}</option>
              ))}
            </select>
          </div>

          <div className="shelters-page-filter-group">
            <label htmlFor="location-filter">–ú—ñ—Å—Ç–æ</label>
            <select
              id="location-filter"
              name="location"
              value={filters.location}
              onChange={handleFilterChange}
              className="shelters-page-filter-select"
            >
              {locations.map(location => (
                <option key={location.value} value={location.value}>{location.label}</option>
              ))}
            </select>
          </div>

          <div className="shelters-page-filter-group checkbox-group">
            <label className="shelters-page-checkbox-label">
              <input
                type="checkbox"
                name="verified"
                checked={filters.verified}
                onChange={handleCheckboxChange}
                className="shelters-page-checkbox"
              />
              –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –ø—Ä–∏—Ç—É–ª–∫–∏
            </label>
          </div>

          <button className="shelters-page-clear-filters-btn" onClick={clearFilters}>
            –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
          </button>
        </div>

        <div className="shelters-page-results-count">
          <p>–ó–Ω–∞–π–¥–µ–Ω–æ: {totalCount} –ø—Ä–∏—Ç—É–ª–∫—ñ–≤</p>
        </div>

        {loading ? (
          <div className="shelters-page-loading-container">
            <div className="shelters-page-loading-spinner"></div>
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
          </div>
        ) : error ? (
          <div className="shelters-page-error-container">
            <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</h3>
            <p>{error}</p>
            <button className="btn-secondary" onClick={() => window.location.reload()}>
              –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
            </button>
          </div>
        ) : (
          <>
            <div className="shelters-page-grid">
              {shelters.length > 0 ? (
                shelters.map(shelter => (
                  <ShelterCard key={shelter._id || shelter.id} shelter={shelter} />
                ))
              ) : (
                <div className="shelters-page-no-results">
                  <p>–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –ø—Ä–∏—Ç—É–ª–∫—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –ø–æ—à—É–∫—É.</p>
                  <button className="btn-secondary" onClick={clearFilters}>–°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏</button>
                </div>
              )}
            </div>
            
            <Pagination />
          </>
        )}
      </div>
    </div>
  );
};

export default SheltersPage;