import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getAnimals } from '../services/animalService';
import '../styles/main.css';
import defaultAnimalImage from '../assets/default-animal.jpg';
import headerBackground from '../assets/animals-header.jpg';

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ —Ç–≤–∞—Ä–∏–Ω–∏ –∑ –∫—Ä–∞—â–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
const AnimalCard = ({ animal, toggleFavorite, onCardClick }) => {
  const handleImageError = (e) => {
    e.target.onerror = null;
    e.target.src = defaultAnimalImage;
  };

  return (
    <div className="animal-listings-card" onClick={() => onCardClick(animal)}>
      <div className="animal-listings-image-container">
        <img 
          src={animal.image} 
          alt={animal.name} 
          className="animal-listings-image" 
          onError={handleImageError}
        />
        <button 
          className={`animal-listings-favorite-btn ${animal.isFavorite ? 'favorited' : ''}`}
          onClick={(e) => {
            e.stopPropagation();
            toggleFavorite(animal._id || animal.id);
          }}
          aria-label={animal.isFavorite ? "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö" : "–î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"}
        >
          {animal.isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
        </button>
        <span className={`animal-listings-status-badge ${animal.status}`}>
          {animal.status === 'available' ? '–î–æ—Å—Ç—É–ø–Ω–∏–π' : 
           animal.status === 'reserved' ? '–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∏–π' : '–ü—Ä–∏–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'}
        </span>
      </div>
      <div className="animal-listings-details">
        <h3>{animal.name}</h3>
        <p className="animal-listings-type">
          {animal.type === 'cat' ? '–ö—ñ—Ç' : 
           animal.type === 'dog' ? '–°–æ–±–∞–∫–∞' : 
           animal.type === 'bird' ? '–ü—Ç–∞—Ö' : '–Ü–Ω—à–µ'}, 
          {animal.gender === 'male' ? ' —Ö–ª–æ–ø—á–∏–∫' : ' –¥—ñ–≤—á–∏–Ω–∫–∞'}, {animal.age}
        </p>
        <p className="animal-listings-shelter">
          {animal.shelterInfo?.name || animal.shelterName || '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Ç—É–ª–æ–∫'}
        </p>
      </div>
    </div>
  );
};

const AnimalListings = () => {
  // –°—Ç–∞–Ω–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏–º–∏ —Ç–∞ UI
  const [animals, setAnimals] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedAnimal, setSelectedAnimal] = useState(null);
  const pageSize = 12;

  // –°—Ç–∞–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const [filters, setFilters] = useState({
    type: 'all',
    gender: 'all',
    age: 'all',
    location: 'all',
    status: 'available',
    searchQuery: '',
  });

  // –û–ø—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const animalTypes = [
    { value: 'all', label: '–í—Å—ñ —Ç–∏–ø–∏' },
    { value: 'dog', label: '–°–æ–±–∞–∫–∏' },
    { value: 'cat', label: '–ö–æ—Ç–∏' },
    { value: 'bird', label: '–ü—Ç–∞—Ö–∏' },
    { value: 'other', label: '–Ü–Ω—à—ñ' },
  ];

  const genders = [
    { value: 'all', label: '–ë—É–¥—å-—è–∫–∞ —Å—Ç–∞—Ç—å' },
    { value: 'male', label: '–•–ª–æ–ø—á–∏–∫–∏' },
    { value: 'female', label: '–î—ñ–≤—á–∞—Ç–∫–∞' },
  ];

  const ages = [
    { value: 'all', label: '–ë—É–¥—å-—è–∫–∏–π –≤—ñ–∫' },
    { value: 'baby', label: '–î–æ 6 –º—ñ—Å—è—Ü—ñ–≤' },
    { value: 'young', label: '–î–æ 2 —Ä–æ–∫—ñ–≤' },
    { value: 'adult', label: '–í—ñ–¥ 2 –¥–æ 8 —Ä–æ–∫—ñ–≤' },
    { value: 'senior', label: '–°—Ç–∞—Ä—à–µ 8 —Ä–æ–∫—ñ–≤' },
  ];

  const locations = [
    { value: 'all', label: '–ë—É–¥—å-—è–∫–µ –º—ñ—Å—Ç–æ' },
    { value: 'kyiv', label: '–ö–∏—ó–≤' },
    { value: 'lviv', label: '–õ—å–≤—ñ–≤' },
    { value: 'odesa', label: '–û–¥–µ—Å–∞' },
    { value: 'kharkiv', label: '–•–∞—Ä–∫—ñ–≤' },
    { value: 'dnipro', label: '–î–Ω—ñ–ø—Ä–æ' },
  ];

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∞–±–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  useEffect(() => {
    const fetchAnimals = async () => {
      try {
        setLoading(true);
        
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Ç—É
        const queryParams = {
          page: currentPage,
          limit: pageSize,
          ...filters,
        };
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä "all", —â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–∞–π–≤–∏—Ö –¥–∞–Ω–∏—Ö
        Object.keys(queryParams).forEach(key => {
          if (queryParams[key] === 'all') delete queryParams[key];
        });
        
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤–∞—Ä–∏–Ω –∑ —Å–µ—Ä–≤—ñ—Å—É
        const response = await getAnimals(queryParams);
        
        setAnimals(response.data || []);
        setTotalCount(response.totalCount || response.data?.length || 0);
        
      } catch (err) {
        console.error('Error fetching animals:', err);
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–≤–∞—Ä–∏–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      } finally {
        setLoading(false);
      }
    };

    fetchAnimals();
  }, [currentPage, filters]);

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
    setCurrentPage(1); // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  };

  // –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const clearFilters = () => {
    setFilters({
      type: 'all',
      gender: 'all',
      age: 'all',
      location: 'all',
      status: 'available',
      searchQuery: '',
    });
    setCurrentPage(1);
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è/–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–∏—Ö
  const toggleFavorite = (animalId) => {
    setAnimals(animals.map(animal => {
      if ((animal._id || animal.id) === animalId) {
        return { ...animal, isFavorite: !animal.isFavorite };
      }
      return animal;
    }));
    
    if (selectedAnimal && (selectedAnimal._id || selectedAnimal.id) === animalId) {
      setSelectedAnimal({
        ...selectedAnimal,
        isFavorite: !selectedAnimal.isFavorite
      });
    }
  };

  // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
  const openAnimalDetails = (animal) => {
    setSelectedAnimal(animal);
    setIsModalOpen(true);
    document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫—É—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É body
  };

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const closeModal = () => {
    setIsModalOpen(false);
    document.body.style.overflow = 'auto'; // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É body
  };

  // –ó–º—ñ–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
    window.scrollTo(0, 0);
  };

  const totalPages = Math.ceil(totalCount / pageSize);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const Pagination = () => {
    if (totalPages <= 1) return null;
    
    return (
      <div className="animal-listings-pagination">
        <button 
          className="animal-listings-page-btn"
          disabled={currentPage === 1}
          onClick={() => handlePageChange(currentPage - 1)}
        >
          &laquo; –ù–∞–∑–∞–¥
        </button>
        
        <div className="animal-listings-page-indicators">
          {currentPage > 1 && (
            <button onClick={() => handlePageChange(1)}>1</button>
          )}
          
          {currentPage > 3 && <span>...</span>}
          
          {currentPage > 2 && (
            <button onClick={() => handlePageChange(currentPage - 1)}>{currentPage - 1}</button>
          )}
          
          <button className="active">{currentPage}</button>
          
          {currentPage < totalPages - 1 && (
            <button onClick={() => handlePageChange(currentPage + 1)}>{currentPage + 1}</button>
          )}
          
          {currentPage < totalPages - 2 && <span>...</span>}
          
          {currentPage < totalPages && (
            <button onClick={() => handlePageChange(totalPages)}>{totalPages}</button>
          )}
        </div>
        
        <button 
          className="animal-listings-page-btn"
          disabled={currentPage === totalPages}
          onClick={() => handlePageChange(currentPage + 1)}
        >
          –î–∞–ª—ñ &raquo;
        </button>
      </div>
    );
  };

  return (
    <div className="animal-listings-page">
      <div className="animal-listings-top-section" 
        style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.7)), url(${headerBackground})` }}>
        <div className="container">
          <h1>–ó–Ω–∞–π–¥—ñ—Ç—å —Ç–≤–∞—Ä–∏–Ω—É, —è–∫–∞ —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å</h1>
          <div className="animal-listings-search-box">
            <input
              type="text"
              name="searchQuery"
              value={filters.searchQuery}
              onChange={handleFilterChange}
              placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é, –æ–ø–∏—Å–æ–º –∞–±–æ –ø—Ä–∏—Ç—É–ª–∫–æ–º..."
              className="animal-listings-search-input"
            />
            <button className="animal-listings-search-btn" aria-label="–ü–æ—à—É–∫">üîç</button>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="animal-listings-filter-section">
          <div className="animal-listings-filter-group">
            <label htmlFor="type-filter">–¢–∏–ø —Ç–≤–∞—Ä–∏–Ω–∏</label>
            <select
              id="type-filter"
              name="type"
              value={filters.type}
              onChange={handleFilterChange}
              className="animal-listings-filter-select"
            >
              {animalTypes.map(type => (
                <option key={type.value} value={type.value}>{type.label}</option>
              ))}
            </select>
          </div>

          <div className="animal-listings-filter-group">
            <label htmlFor="gender-filter">–°—Ç–∞—Ç—å</label>
            <select
              id="gender-filter"
              name="gender"
              value={filters.gender}
              onChange={handleFilterChange}
              className="animal-listings-filter-select"
            >
              {genders.map(gender => (
                <option key={gender.value} value={gender.value}>{gender.label}</option>
              ))}
            </select>
          </div>

          <div className="animal-listings-filter-group">
            <label htmlFor="location-filter">–ú—ñ—Å—Ç–æ</label>
            <select
              id="location-filter"
              name="location"
              value={filters.location}
              onChange={handleFilterChange}
              className="animal-listings-filter-select"
            >
              {locations.map(location => (
                <option key={location.value} value={location.value}>{location.label}</option>
              ))}
            </select>
          </div>

          <div className="animal-listings-filter-group">
            <label htmlFor="age-filter">–í—ñ–∫</label>
            <select
              id="age-filter"
              name="age"
              value={filters.age}
              onChange={handleFilterChange}
              className="animal-listings-filter-select"
            >
              {ages.map(age => (
                <option key={age.value} value={age.value}>{age.label}</option>
              ))}
            </select>
          </div>

          <div className="animal-listings-filter-group">
            <label htmlFor="status-filter">–°—Ç–∞—Ç—É—Å</label>
            <select
              id="status-filter"
              name="status"
              value={filters.status}
              onChange={handleFilterChange}
              className="animal-listings-filter-select"
            >
              <option value="available">–î–æ—Å—Ç—É–ø–Ω—ñ</option>
              <option value="reserved">–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ</option>
              <option value="adopted">–ü—Ä–∏–ª–∞—à—Ç–æ–≤–∞–Ω—ñ</option>
              <option value="all">–í—Å—ñ</option>
            </select>
          </div>

          <button className="animal-listings-clear-filters-btn" onClick={clearFilters}>
            –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
          </button>
        </div>

        <div className="animal-listings-results-count">
          <p>–ó–Ω–∞–π–¥–µ–Ω–æ: {totalCount} —Ç–≤–∞—Ä–∏–Ω</p>
        </div>

        {loading ? (
          <div className="animal-listings-loading-container">
            <div className="animal-listings-loading-spinner"></div>
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
          </div>
        ) : error ? (
          <div className="animal-listings-error-container">
            <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</h3>
            <p>{error}</p>
            <button className="btn-secondary" onClick={() => window.location.reload()}>
              –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
            </button>
          </div>
        ) : (
          <>
            <div className="animal-listings-grid">
              {animals.length > 0 ? (
                animals.map(animal => (
                  <AnimalCard 
                    key={animal._id || animal.id} 
                    animal={animal} 
                    toggleFavorite={toggleFavorite}
                    onCardClick={openAnimalDetails}
                  />
                ))
              ) : (
                <div className="animal-listings-no-results">
                  <p>–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î —Ç–≤–∞—Ä–∏–Ω, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –ø–æ—à—É–∫—É.</p>
                  <button className="btn-secondary" onClick={clearFilters}>–°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏</button>
                </div>
              )}
            </div>
            
            <Pagination />
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é */}
      {isModalOpen && selectedAnimal && (
        <div className="animal-listings-modal-overlay" onClick={closeModal}>
          <div className="animal-listings-modal" onClick={e => e.stopPropagation()}>
            <button className="animal-listings-close-modal-btn" onClick={closeModal} aria-label="–ó–∞–∫—Ä–∏—Ç–∏">‚úï</button>
            <div className="animal-listings-modal-content">
              <div className="animal-listings-modal-image-container">
                <img 
                  src={selectedAnimal.image} 
                  alt={selectedAnimal.name} 
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src = defaultAnimalImage;
                  }}
                />
                <button 
                  className={`animal-listings-favorite-btn large ${selectedAnimal.isFavorite ? 'favorited' : ''}`}
                  onClick={() => toggleFavorite(selectedAnimal._id || selectedAnimal.id)}
                  aria-label={selectedAnimal.isFavorite ? "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö" : "–î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"}
                >
                  {selectedAnimal.isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
                </button>
                <div className={`animal-listings-modal-status ${selectedAnimal.status}`}>
                  {selectedAnimal.status === 'available' ? '–î–æ—Å—Ç—É–ø–Ω–∏–π' : 
                   selectedAnimal.status === 'reserved' ? '–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∏–π' : '–ü—Ä–∏–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'}
                </div>
              </div>
              <div className="animal-listings-modal-details">
                <h2>{selectedAnimal.name}</h2>
                <div className="animal-listings-modal-tags">
                  <span className="animal-listings-tag">
                    {selectedAnimal.type === 'cat' ? '–ö—ñ—Ç' : 
                     selectedAnimal.type === 'dog' ? '–°–æ–±–∞–∫–∞' : 
                     selectedAnimal.type === 'bird' ? '–ü—Ç–∞—Ö' : '–Ü–Ω—à–µ'}
                  </span>
                  <span className="animal-listings-tag">
                    {selectedAnimal.gender === 'male' ? '–•–ª–æ–ø—á–∏–∫' : '–î—ñ–≤—á–∏–Ω–∫–∞'}
                  </span>
                  <span className="animal-listings-tag">{selectedAnimal.age}</span>
                </div>
                <div className="animal-listings-modal-info">
                  <div className="animal-listings-modal-info-item">
                    <span className="animal-listings-modal-info-label">–ü—Ä–∏—Ç—É–ª–æ–∫:</span>
                    <span className="animal-listings-modal-info-value">
                      {selectedAnimal.shelterInfo?.name || selectedAnimal.shelterName || '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Ç—É–ª–æ–∫'}
                    </span>
                  </div>
                  <div className="animal-listings-modal-info-item">
                    <span className="animal-listings-modal-info-label">–ü–æ—Ä–æ–¥–∞:</span>
                    <span className="animal-listings-modal-info-value">
                      {selectedAnimal.breed || '–ù–µ–≤—ñ–¥–æ–º–∞'}
                    </span>
                  </div>
                  <div className="animal-listings-modal-info-item">
                    <span className="animal-listings-modal-info-label">–†–æ–∑–º—ñ—Ä:</span>
                    <span className="animal-listings-modal-info-value">
                      {selectedAnimal.size === 'small' ? '–ú–∞–ª–∏–π' : 
                       selectedAnimal.size === 'medium' ? '–°–µ—Ä–µ–¥–Ω—ñ–π' : 
                       selectedAnimal.size === 'large' ? '–í–µ–ª–∏–∫–∏–π' : '–ù–µ–≤—ñ–¥–æ–º–æ'}
                    </span>
                  </div>
                  <div className="animal-listings-modal-info-item">
                    <span className="animal-listings-modal-info-label">–ó–¥–æ—Ä–æ–≤'—è:</span>
                    <span className="animal-listings-modal-info-value">
                      {selectedAnimal.health || '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è'}
                    </span>
                  </div>
                </div>
                
                <div className="animal-listings-modal-description">
                  <h3>–û–ø–∏—Å</h3>
                  <p>{selectedAnimal.description || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}</p>
                </div>
                
                <div className="animal-listings-modal-actions">
                  <Link 
                    to={`/shelters/${selectedAnimal.shelterId || selectedAnimal.shelterInfo?._id}`} 
                    className="animal-listings-btn-secondary"
                  >
                    –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏—Ç—É–ª–æ–∫
                  </Link>
                  {selectedAnimal.status === 'available' && (
                    <Link 
                      to={`/adoption-request/${selectedAnimal._id || selectedAnimal.id}`} 
                      className="animal-listings-btn-primary"
                    >
                      –ü–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —É—Å–∏–Ω–æ–≤–ª–µ–Ω–Ω—è
                    </Link>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AnimalListings;